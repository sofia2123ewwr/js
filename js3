https://www.codewars.com/kata/find-the-smallest-integer-in-the-array/train/javascript


class SmallestIntegerFinder {
  findSmallestInt(args) {
    return Math.min(...args)
  }
} 

or

class SmallestIntegerFinder {
function findSmallestInt(args) {
     args.sort((a, b) => a - b)
     return args[0]
}
}

abbreviated
class SmallestIntegerFinder {
function findSmallestInt(args) {
return args.sort((a,b)=>a-b)[0]
}}

or
class SmallestIntegerFinder {
function findSmallestInt(args) {
    return args.reduce((acc, cur) => acc < cur ? acc : cur)
}}

https://www.codewars.com/kata/geometry-basics-circle-circumference-in-2d/train/javascript

function circleCircumference(circle) {
const circumference = (circle.radius *2*Math.PI)
return circumference
}

abbrevited

function circleCircumference(circle) {
return circle.radius *2*Math.PI
}

https://www.codewars.com/kata/training-js-number-12-loop-statement-for-dot-in-and-for-dot-of/train/javascript

function giveMeFive(obj){
const five = [];
  for(const key in obj){
  if(key.length === 5) 
      five.push(key)
    if(obj[key].length === 5) 
       five.push(obj[key])
}  
    
  return five;
}

https://www.codewars.com/kata/understanding-closures-the-basics/train/javascript


function buildFun(n){
  let res = [];
	for (let i = 0; i< n; i++){
		res.push(() => i);
	}
	return res;
  }
  
  or
  
  function buildFun(n) {

  var res = []

  for (var i = 0; i< n; i++) {
    let num = i;
    res.push(function() {
      return num;
    })
  }
  return res;
}

https://www.codewars.com/kata/fun-with-es6-classes-number-2-animals-and-inheritance/train/javascript



class Shark extends Animal {
  constructor(name, age, status) {
    super();
    this.name = name;
    this.age = age;
    this.legs = 0;
    this.status = status;
    this.species = 'shark';
  }
}

class Cat extends Animal {
  constructor(name, age, status) {
    super();
    this.name = name;
    this.age = age;
    this.status = status;
    this.legs = 4;
    this.species = 'cat';
  }
  introduce() {
    return `Hello, my name is ${this.name} and I am ${this.age} years old.  Meow meow!`;
  }
}

class Dog extends Animal {
  constructor(name, age, status,master='') {
    super();
    this.master = master;
    this.name = name;
    this.age = age;
    this.status = status;
    this.legs = 4;
    this.species = 'dog';
  }
  introduce() {
    return `Hello, my name is ${this.name} and I am ${this.age} years old.`;
  }
  greetMaster() {
    return `Hello ${this.master}`;
  }
}
or

class Shark extends Animal {
  constructor(name, age, status) {
    super(name, age, 0, "shark", status);
  }
}

class Cat extends Animal {
  constructor(name, age, status) {
    super(name, age, 4, "cat", status);
  }
  introduce() {
    return `${super.introduce()}  Meow meow!`;
  }
}

class Dog extends Animal {
  constructor(name, age, status, master) {
    super(name, age, 4, "dog", status);
    this.master = master;
  }
  greetMaster() {
    return `Hello ${this.master}`;
  }
}
